import { useQuery } from "@tanstack/react-query";
import { useState, useEffect, useRef } from "react";
import { Crown, Bell, Gift, ArrowRight, MessageCircle, Mail, Headphones, Cloud, Heart, Brain, Activity, Star } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Link } from "wouter";
import DailyRitual from "@/components/DailyRitual";
import JournalEntry from "@/components/JournalEntry";
import CosmicSparkle, { useCosmicSparkle } from "@/components/CosmicSparkle";
import { useLuxurySounds } from "@/hooks/useLuxurySounds";
import ElevenLabsConnector from "@/components/ElevenLabsConnector";
import DivineHeader from "@/components/DivineHeader";
import WebXRInterface from "@/components/WebXRInterface";
import CloudSyncStatus from "@/components/CloudSyncStatus";

import { useTranslation } from "@/contexts/LanguageContext";
import { User } from "@shared/schema";
import { IntelligentFeedbackSystem } from "@/components/IntelligentFeedbackSystem";
import { useVanessaIntelligence } from "@/components/VanessaIntelligenceProvider";

export default function Home() {
  const { data: user } = useQuery<User>({
    queryKey: ["/api/user"],
  });
  
  const { data: achievements } = useQuery({ queryKey: ["/api/achievements"] });
  const { t, currentLanguage } = useTranslation();
  
  // Vanessa Intelligence Integration
  const { state: vanessaIntelligence, actions: vanessaActions } = useVanessaIntelligence();
  
  console.log(`🏠 [HOME PAGE] Loaded with language: ${currentLanguage}`);
  
  // AI Chat limit state (for Vanessa DI)
  const [aiChatLimitStatus, setAiChatLimitStatus] = useState({ allowed: true, remainingMessages: 3 });
  
  // Interface visibility states
  const [showWebXRInterface, setShowWebXRInterface] = useState(false);
  const [showCloudSyncStatus, setShowCloudSyncStatus] = useState(false);
  
  // Luxury sounds
  const sounds = useLuxurySounds({ volume: 0.25, soundOption: 'gentle-chime' });
  
  // Cosmic sparkle triggers
  const divineAssessmentSparkle = useCosmicSparkle();
  const prayerRoomSparkle = useCosmicSparkle();
  const welcomeGiftSparkle = useCosmicSparkle();
  const energyReadingsSparkle = useCosmicSparkle();

  // Inspirational quotes generated by Vanessa DI for rotating display
  const getVanessaInspirationalQuotes = () => {
    return [
      "Your inner wisdom already knows the way forward",
      "Every challenge is your soul's invitation to grow stronger",
      "Trust the divine timing of your life's unfolding",
      "You are worthy of all the love and abundance you desire",
      "Your authentic self is your greatest spiritual gift",
      "Sacred transformation begins with loving yourself fully",
      "The universe conspires to support your highest good",
      "Your intuition is the voice of your divine essence",
      "Embracing your shadow creates space for your light",
      "Every breath is an opportunity to choose love over fear",
      "Your sensitivity is a superpower, not a weakness",
      "Abundance flows when you align with your soul's purpose",
      "You are both the student and the teacher on this journey",
      "Divine feminine energy heals through radical self-compassion",
      "Your dreams are sacred downloads from your higher self",
      "Gratitude transforms ordinary moments into miracles",
      "You have everything within you to create the life you envision",
      "Sacred boundaries are acts of self-love and divine protection"
    ];
  };

  const welcomeMessages = getVanessaInspirationalQuotes();

  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
  const [hasSpokenGreeting, setHasSpokenGreeting] = useState(false);
  const [isGreetingInProgress, setIsGreetingInProgress] = useState(false);
  
  // Use ref to track if greeting has been initiated to prevent duplicates
  const greetingInitiated = useRef(false);

  const greetingTimerRef = useRef<NodeJS.Timeout | null>(null);

  // Voice settings state for greetings
  const [voiceSettings] = useState({
    provider: 'openai' as const,
    openaiVoice: 'nova' as const,
    openaiModel: 'tts-1-hd' as const,
    speed: 1.0,
    elevenlabsVoiceId: 'BKCYyTup8jT5sGwKXdNl'
  });


  // Personalized voice greeting system
  const getPersonalizedVoiceGreeting = () => {
    const userName = user?.username || user?.firstName || 'Beautiful Soul';
    const hour = new Date().getHours();
    
    if (hour < 12) {
      return `Good morning, ${userName}. Welcome to your sacred space.`;
    } else if (hour < 17) {
      return `Good afternoon, ${userName}. I'm glad you're here.`;
    } else if (hour < 20) {
      return `Good evening, ${userName}. Let's explore what your soul needs tonight.`;
    } else {
      return `Good night, ${userName}. May this time bring you peace and clarity.`;
    }
  };

  // Function to speak the personalized greeting using ElevenLabs as default
  const speakPersonalizedGreeting = async () => {
    if (user && !isGreetingInProgress && !greetingInitiated.current) {
      greetingInitiated.current = true;
      setIsGreetingInProgress(true);
      
      try {
        // Cancel any existing speech synthesis first
        if ('speechSynthesis' in window) {
          speechSynthesis.cancel();
        }
        
        const greeting = getPersonalizedVoiceGreeting();
        const response = await fetch('/api/elevenlabs/synthesize', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            text: greeting,
            voiceId: voiceSettings.elevenlabsVoiceId,
            openaiVoice: voiceSettings.openaiVoice,
            openaiModel: voiceSettings.openaiModel,
            speed: voiceSettings.speed,
            modelId: 'eleven_turbo_v2',
            voiceSettings: {
              stability: 0.5,
              similarity_boost: 0.8,
              style: 0.3,
              use_speaker_boost: true
            }
          }),
        });

        if (response.ok) {
          const contentType = response.headers.get('content-type');
          
          // Check if response is audio or fallback JSON
          if (contentType && contentType.includes('audio')) {
            // ElevenLabs audio response
            const audioBlob = await response.blob();
            const audioUrl = URL.createObjectURL(audioBlob);
            const audio = new Audio(audioUrl);
            audio.volume = 0.8;
            audio.onended = () => {
              setIsGreetingInProgress(false);
              greetingInitiated.current = true; // Ensure we don't speak again
            };
            audio.onerror = () => {
              setIsGreetingInProgress(false);
              greetingInitiated.current = true; // Ensure we don't speak again
            };
            audio.play();
            return;
          } else {
            // Fallback response
            const fallbackData = await response.json();
            console.log('Using fallback voice:', fallbackData.message);
          }
        }
        
        // Fallback to browser speech synthesis
        if ('speechSynthesis' in window) {
          const greeting = getPersonalizedVoiceGreeting();
          const utterance = new SpeechSynthesisUtterance(greeting);
          utterance.rate = 0.9;
          utterance.pitch = 1.1;
          utterance.volume = 0.8;
          utterance.onend = () => {
            setIsGreetingInProgress(false);
            greetingInitiated.current = true;
          };
          utterance.onerror = () => {
            setIsGreetingInProgress(false);
            greetingInitiated.current = true;
          };
          speechSynthesis.speak(utterance);
        } else {
          setIsGreetingInProgress(false);
        }
      } catch (error) {
        console.error('Error synthesizing greeting:', error);
        setIsGreetingInProgress(false);
        greetingInitiated.current = true;
        
        // Fallback to browser speech synthesis
        if ('speechSynthesis' in window) {
          speechSynthesis.cancel(); // Clear any pending speech
          const greeting = getPersonalizedVoiceGreeting();
          const utterance = new SpeechSynthesisUtterance(greeting);
          utterance.rate = 0.9;
          utterance.pitch = 1.1;
          utterance.volume = 0.8;
          utterance.onend = () => greetingInitiated.current = true;
          utterance.onerror = () => greetingInitiated.current = true;
          speechSynthesis.speak(utterance);
        }
      }
    }
  };

  // Check if user has claimed welcome gift
  const hasClaimedWelcomeGift = Array.isArray(achievements) && achievements.some((achievement: any) => 
    achievement.achievementType === "welcome_gift" && achievement.isUnlocked
  );

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentMessageIndex((prev) => (prev + 1) % welcomeMessages.length);
    }, 4000); // Change message every 4 seconds

    return () => clearInterval(interval);
  }, [welcomeMessages.length]);

  // Fetch AI chat limit status for Vanessa DI
  useEffect(() => {
    if (user) {
      fetch('/api/check-ai-chat-limit')
        .then(res => res.json())
        .then(data => {
          setAiChatLimitStatus({
            allowed: data.allowed,
            remainingMessages: data.remainingMessages || 0
          });
        })
        .catch(err => {
          console.error('Error fetching AI chat limit:', err);
        });
    }
  }, [user]);

  // Automatically speak greeting when user loads home page (only once per visit)
  useEffect(() => {
    if (user && !greetingInitiated.current && !hasSpokenGreeting && !isGreetingInProgress) {
      // Clear any existing timer
      if (greetingTimerRef.current) {
        clearTimeout(greetingTimerRef.current);
      }
      
      // Set new timer
      greetingTimerRef.current = setTimeout(() => {
        if (!greetingInitiated.current && !hasSpokenGreeting && !isGreetingInProgress) {
          speakPersonalizedGreeting();
          setHasSpokenGreeting(true);
        }
      }, 1500);
      
      return () => {
        if (greetingTimerRef.current) {
          clearTimeout(greetingTimerRef.current);
        }
      };
    }
  }, [user]);

  // Cleanup when component unmounts
  useEffect(() => {
    return () => {
      // Cancel any ongoing speech
      if ('speechSynthesis' in window) {
        speechSynthesis.cancel();
      }
      // Clear timer
      if (greetingTimerRef.current) {
        clearTimeout(greetingTimerRef.current);
      }
    };
  }, []);

  const getGreeting = () => {
    const hour = new Date().getHours();
    if (hour < 12) return t('greetings.goodMorning');
    if (hour < 17) return t('greetings.goodAfternoon');
    if (hour < 20) return t('greetings.goodEvening');
    return t('greetings.goodNight');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-cream via-white to-soft-gray pb-20 overflow-x-hidden max-w-full">
      <DivineHeader 
        title={t('headers.theDivineVanity')}
        subtitle={getGreeting()}
        icon={Crown}
        rightButton={
          <Button
            variant="ghost"
            size="icon"
            className="p-2 rounded-full bg-soft-gold/20 hover:bg-soft-gold/30 transition-colors"
          >
            <Bell className="w-5 h-5 text-divine-gold" />
          </Button>
        }
      />

      {/* Main Content */}
      <main className="overflow-x-hidden max-w-full">
        {/* Rotating Welcome Message */}
        <section className="px-6 pt-6 pb-4">
          <div className="text-center">
            <h2 className="font-playfair text-2xl font-semibold text-deep-charcoal mb-2 transition-all duration-500 ease-in-out">
              {welcomeMessages[currentMessageIndex]}
            </h2>
            <div className="flex justify-center space-x-1 mt-3">
              {welcomeMessages.map((_, index) => (
                <div
                  key={index}
                  className={`w-2 h-2 rounded-full transition-all duration-300 ${
                    index === currentMessageIndex 
                      ? 'bg-divine-gold' 
                      : 'bg-soft-gray'
                  }`}
                />
              ))}
            </div>

          </div>
        </section>

        {/* Divine Quantum Soul Map™ - Featured at Top */}
        <section className="px-6 pb-6">
          <Button
            variant="ghost"
            className="w-full bg-gradient-to-br from-purple-900 via-pink-900 to-rose-900 rounded-3xl p-6 shadow-2xl border-2 border-purple-300/40 hover:shadow-3xl transition-all duration-500 transform hover:-translate-y-2 h-auto flex items-center justify-center divine-shadow relative overflow-hidden"
            onClick={() => {
              sounds.playClickSound();
              window.location.href = '/quantum-soul-map';
            }}
          >
            {/* Enhanced Immersive Sparkling Background matching main page */}
            <div className="absolute inset-0 overflow-hidden">
              {/* Base gradient layers */}
              <div className="absolute inset-0 bg-gradient-to-br from-purple-900/40 via-pink-800/30 to-rose-800/20"></div>
              <div className="absolute inset-0 bg-gradient-to-tr from-indigo-900/20 via-purple-700/15 to-pink-600/10"></div>
              <div className="absolute inset-0 bg-gradient-to-bl from-violet-900/15 via-fuchsia-800/10 to-rose-700/5"></div>
              
              {/* Animated sparkles */}
              {[...Array(25)].map((_, i) => (
                <div
                  key={i}
                  className="absolute animate-pulse"
                  style={{
                    left: `${Math.random() * 100}%`,
                    top: `${Math.random() * 100}%`,
                    animationDelay: `${Math.random() * 4}s`,
                    animationDuration: `${2 + Math.random() * 4}s`
                  }}
                >
                  <Star 
                    className="text-yellow-300/70 w-3 h-3" 
                    style={{
                      filter: 'drop-shadow(0 0 8px rgba(253, 224, 71, 0.6))'
                    }}
                  />
                </div>
              ))}

              {/* Moving stars */}
              {[...Array(15)].map((_, i) => (
                <div
                  key={`star-${i}`}
                  className="absolute animate-bounce"
                  style={{
                    left: `${Math.random() * 100}%`,
                    top: `${Math.random() * 100}%`,
                    animationDelay: `${Math.random() * 5}s`,
                    animationDuration: `${3 + Math.random() * 5}s`
                  }}
                >
                  <Star 
                    className="text-pink-300/50 w-2 h-2" 
                    style={{
                      filter: 'drop-shadow(0 0 6px rgba(251, 182, 206, 0.4))'
                    }}
                  />
                </div>
              ))}

              {/* Flowing hearts */}
              {[...Array(10)].map((_, i) => (
                <div
                  key={`heart-${i}`}
                  className="absolute animate-pulse"
                  style={{
                    left: `${Math.random() * 100}%`,
                    top: `${Math.random() * 100}%`,
                    animationDelay: `${Math.random() * 6}s`,
                    animationDuration: `${4 + Math.random() * 4}s`
                  }}
                >
                  <Heart 
                    className="text-rose-300/40 w-2 h-2" 
                    style={{
                      filter: 'drop-shadow(0 0 4px rgba(251, 113, 133, 0.3))'
                    }}
                  />
                </div>
              ))}

              {/* Glowing orbs */}
              {[...Array(8)].map((_, i) => (
                <div
                  key={`orb-${i}`}
                  className="absolute rounded-full animate-ping"
                  style={{
                    left: `${Math.random() * 100}%`,
                    top: `${Math.random() * 100}%`,
                    width: '4px',
                    height: '4px',
                    background: 'radial-gradient(circle, rgba(253, 224, 71, 0.9) 0%, rgba(253, 224, 71, 0) 70%)',
                    animationDelay: `${Math.random() * 7}s`,
                    animationDuration: `${5 + Math.random() * 4}s`
                  }}
                />
              ))}

              {/* Cosmic waves */}
              {[...Array(5)].map((_, i) => (
                <div
                  key={`wave-${i}`}
                  className="absolute rounded-full animate-ping"
                  style={{
                    left: `${Math.random() * 100}%`,
                    top: `${Math.random() * 100}%`,
                    width: '20px',
                    height: '20px',
                    background: 'radial-gradient(circle, rgba(147, 51, 234, 0.2) 0%, rgba(147, 51, 234, 0) 70%)',
                    animationDelay: `${Math.random() * 8}s`,
                    animationDuration: `${6 + Math.random() * 4}s`
                  }}
                />
              ))}
            </div>
            
            <div className="w-16 h-16 bg-gradient-to-r from-purple-600 via-pink-600 to-rose-600 rounded-full flex items-center justify-center mr-4 relative z-10 shadow-2xl">
              <Star className="w-8 h-8 text-white" />
            </div>
            <div className="text-left relative z-10">
              <div className="mb-3">
                <h2 className="font-playfair text-lg font-bold bg-gradient-to-r from-purple-200 via-pink-200 to-rose-200 bg-clip-text text-transparent mb-1">
                  Begin Your Soul Map Journey
                </h2>
                <h3 className="font-playfair text-base font-semibold bg-gradient-to-r from-purple-200 via-pink-200 to-rose-200 bg-clip-text text-transparent">
                  Divine Quantum Soul Map™
                </h3>
              </div>
              <p className="text-sm text-purple-100 font-medium mb-1">Sacred multidimensional soul decoding</p>
              <p className="text-xs text-pink-200/80">1,800-2,500 word personalized reading with 5 sacred perspectives</p>
            </div>
          </Button>
        </section>

        {/* Welcome Gift Banner - Only show if not claimed */}
        {!hasClaimedWelcomeGift && (
          <section className="px-6 pb-6">
            <Card className="relative overflow-hidden border-divine-gold/30 bg-gradient-to-r from-divine-gold/10 via-cream/50 to-divine-gold/10 animate-pulse-gentle">
              <div className="absolute inset-0 bg-gradient-to-r from-divine-gold/5 to-transparent opacity-50"></div>
              <CardContent className="p-6 relative">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="w-12 h-12 bg-divine-gold/20 rounded-full flex items-center justify-center">
                      <Gift className="w-6 h-6 text-divine-gold" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-deep-charcoal mb-1">
                        {t('home.welcomeGift')}
                      </h3>
                      <p className="text-sm text-gray-600">
                        {t('home.claimSpecialGift')}
                      </p>
                    </div>
                  </div>
                  <CosmicSparkle 
                    trigger={welcomeGiftSparkle.trigger} 
                    intensity="high" 
                    color="divine"
                  >
                    <Button 
                      className="bg-divine-gold hover:bg-divine-gold/90 text-white px-6 py-2 rounded-full flex items-center space-x-2 shadow-lg"
                      onClick={() => {
                        sounds.playClickSound();
                        welcomeGiftSparkle.sparkle();
                        window.location.href = '/welcome-gift';
                      }}
                    >
                      <span>{t('buttons.claimGift')}</span>
                      <ArrowRight className="w-4 h-4" />
                    </Button>
                  </CosmicSparkle>
                </div>
              </CardContent>
            </Card>
          </section>
        )}

        <DailyRitual />
        
        {/* ElevenLabs Voice Assistant Connection */}
        <section className="px-6 pb-6">
          <ElevenLabsConnector />
        </section>
        
        {/* Decode You™ Tool Feature */}
        <section className="px-6 pb-6">
          <Card className="relative overflow-hidden border-divine-gold/30 bg-gradient-to-r from-divine-gold/5 via-cream/30 to-divine-gold/5">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <div className="w-12 h-12 bg-gradient-to-br from-divine-gold to-amber-400 rounded-full flex items-center justify-center shadow-lg">
                    <Heart className="w-6 h-6 text-white" />
                  </div>
                  <div>
                    <h3 className="font-playfair text-lg font-semibold text-deep-charcoal mb-1">
                      Decode You™ Tool
                    </h3>
                    <p className="text-sm text-gray-600">
                      Sacred 5-step reflection to understand your patterns & transform your responses
                    </p>
                  </div>
                </div>
                <CosmicSparkle trigger={welcomeGiftSparkle.trigger} intensity="medium" color="divine">
                  <Button 
                    className="bg-divine-gold hover:bg-divine-gold/90 text-white px-6 py-3 rounded-full flex items-center space-x-2 shadow-lg"
                    onClick={() => {
                      sounds.playClickSound();
                      welcomeGiftSparkle.sparkle();
                      window.location.href = '/decode-you';
                    }}
                  >
                    <span>Begin Reflection</span>
                    <ArrowRight className="w-4 h-4" />
                  </Button>
                </CosmicSparkle>
              </div>
            </CardContent>
          </Card>
        </section>

        {/* Quick Actions */}
        <section className="px-6 pb-8 overflow-x-hidden">
          <div className="grid grid-cols-2 gap-4 animate-slide-up max-w-full">
            <Button
              variant="ghost"
              className="bg-white rounded-2xl p-6 shadow-md border border-soft-gray hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 h-auto flex flex-col items-center divine-shadow"
              onClick={() => {
                sounds.playClickSound();
                window.location.href = '/journal';
              }}
            >
              <div className="w-12 h-12 bg-soft-gold/20 rounded-full flex items-center justify-center mb-3">
                <svg className="w-6 h-6 text-divine-gold" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M17.414 2.586a2 2 0 00-2.828 0L7 10.172V13h2.828l7.586-7.586a2 2 0 000-2.828z" />
                  <path fillRule="evenodd" d="M2 6a2 2 0 012-2h4a1 1 0 010 2H4v10h10v-4a1 1 0 112 0v4a2 2 0 01-2 2H4a2 2 0 01-2-2V6z" clipRule="evenodd" />
                </svg>
              </div>
              <h3 className="font-playfair text-lg font-medium mb-1">{t('headers.theVanityMirror')}</h3>
              <p className="text-sm text-gray-600 text-center">{t('headers.sacredJournalingSpace')}</p>
            </Button>

            <CosmicSparkle 
              trigger={prayerRoomSparkle.trigger} 
              intensity="medium" 
              color="divine"
            >
              <Button
                variant="ghost"
                className="bg-gradient-to-r from-divine-gold/10 to-cream/30 rounded-2xl p-6 shadow-md border border-divine-gold/20 hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 h-auto flex flex-col items-center divine-shadow"
                onClick={() => {
                  sounds.playClickSound();
                  prayerRoomSparkle.sparkle();
                  window.location.href = '/prayer-room';
                }}
              >
                <div className="w-12 h-12 bg-divine-gold/20 rounded-full flex items-center justify-center mb-3">
                  <svg className="w-6 h-6 text-divine-gold" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd" />
                  </svg>
                </div>
                <h3 className="font-playfair text-lg font-medium mb-1 text-divine-gold">Prayer Room</h3>
                <p className="text-sm text-gray-600 text-center">Sacred Community</p>
              </Button>
            </CosmicSparkle>
          </div>
          
          {/* Daily Astrology Button */}
          <div className="mt-4">
            <CosmicSparkle 
              trigger={energyReadingsSparkle.trigger} 
              intensity="high" 
              color="divine"
            >
              <Button
                variant="ghost"
                className="w-full bg-gradient-to-br from-indigo-950 via-purple-950 to-black rounded-2xl p-4 shadow-md border border-indigo-300/30 hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 h-auto flex items-center justify-center divine-shadow astrology-sparkle relative overflow-hidden"
                onClick={() => {
                  sounds.playClickSound();
                  energyReadingsSparkle.sparkle();
                  window.location.href = '/daily-astrology';
                }}
              >
                {/* Dynamic Stars Background */}
                <div className="astrology-star"></div>
                <div className="astrology-star"></div>
                <div className="astrology-star"></div>
                <div className="astrology-star"></div>
                <div className="astrology-star"></div>
                <div className="astrology-star"></div>
                <div className="astrology-star"></div>
                <div className="astrology-star"></div>
                
                {/* Shooting Star */}
                <div className="shooting-star"></div>
                
                {/* Sparkle Effects */}
                <div className="sparkle-effect"></div>
                <div className="sparkle-effect"></div>
                <div className="sparkle-effect"></div>
                
                <div className="w-10 h-10 bg-indigo-500/20 rounded-full flex items-center justify-center mr-4 relative z-10">
                  <svg className="w-5 h-5 text-purple-300" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2L13.09 8.26L18 7L16.74 12L21 14L14.74 15.09L16 20L12 17.26L8 20L9.26 14.74L3 12L7.26 10.91L6 5L12 8.74L12 2Z" />
                  </svg>
                </div>
                <div className="text-left relative z-10">
                  <h3 className="font-playfair text-lg font-medium mb-1 text-white">Daily Astrology</h3>
                  <p className="text-sm text-purple-200">Personalized Cosmic Guidance</p>
                  <p className="text-xs text-purple-300 font-medium">Premium: Free monthly • Regular: $33</p>
                </div>
              </Button>
            </CosmicSparkle>
          </div>
          
          {/* Divine Shop Button */}
          <div className="mt-4">
            <Button
              variant="ghost"
              className="w-full bg-gradient-to-r from-cream/30 to-divine-gold/10 rounded-2xl p-4 shadow-md border border-divine-gold/20 hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 h-auto flex items-center justify-center divine-shadow"
              onClick={() => {
                sounds.playClickSound();
                window.location.href = '/shop';
              }}
            >
              <div className="w-10 h-10 bg-divine-gold/20 rounded-full flex items-center justify-center mr-4">
                <svg className="w-5 h-5 text-divine-gold" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                </svg>
              </div>
              <div className="text-left">
                <h3 className="font-playfair text-lg font-medium mb-1 text-divine-gold">Divine Shop</h3>
                <p className="text-sm text-gray-600">Sacred Tools & Spiritual Products</p>
              </div>
            </Button>
          </div>
          
          {/* Interactive Mood Board Button */}
          <div className="mt-4">
            <Button
              variant="ghost"
              className="w-full bg-gradient-to-r from-pink-500/10 to-purple-500/10 rounded-2xl p-4 shadow-md border border-pink-300/30 hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 h-auto flex items-center justify-center divine-shadow"
              onClick={() => {
                sounds.playClickSound();
                window.location.href = '/mood-board';
              }}
            >
              <div className="w-10 h-10 bg-pink-500/20 rounded-full flex items-center justify-center mr-4">
                <svg className="w-5 h-5 text-pink-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12h2m-2 4h2" />
                </svg>
              </div>
              <div className="text-left">
                <h3 className="font-playfair text-lg font-medium mb-1 text-pink-600">Sacred Mood Board</h3>
                <p className="text-sm text-gray-600">Create Divine Vision Collages</p>
                <p className="text-xs text-pink-500 font-medium">Interactive • Drag & Drop</p>
              </div>
            </Button>
          </div>

          {/* Client Portal Button */}
          <div className="mt-4">
            <Button
              variant="ghost"
              className="w-full bg-gradient-to-r from-purple-500/10 to-pink-500/10 rounded-2xl p-4 shadow-md border border-purple-300/30 hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 h-auto flex items-center justify-center divine-shadow"
              onClick={() => {
                sounds.playClickSound();
                window.location.href = '/client-portal';
              }}
            >
              <div className="w-10 h-10 bg-purple-500/20 rounded-full flex items-center justify-center mr-4">
                <svg className="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <div className="text-left">
                <h3 className="font-playfair text-lg font-medium mb-1 text-purple-600">Client Portal</h3>
                <p className="text-sm text-gray-600">Your Complete Sacred Dashboard</p>
              </div>
            </Button>
          </div>

          {/* Revolutionary Consciousness Technology */}
          <div className="mt-4 space-y-3">
            {/* Neural Pattern Learning - Full Width */}
            <Button
              variant="ghost"
              className="w-full bg-gradient-to-r from-purple-600/20 via-pink-600/20 to-rose-600/20 rounded-2xl p-4 shadow-lg border-2 border-purple-300/40 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 h-auto flex items-center justify-center divine-shadow relative overflow-hidden"
              onClick={() => {
                sounds.playClickSound();
                window.location.href = '/neural-patterns';
              }}
            >
              <div className="absolute inset-0 bg-gradient-to-r from-purple-500/10 via-pink-500/10 to-rose-500/10 animate-pulse"></div>
              <div className="w-10 h-10 bg-gradient-to-r from-purple-600 via-pink-600 to-rose-600 rounded-full flex items-center justify-center mr-3 relative z-10 shadow-lg">
                <Activity className="w-5 h-5 text-white" />
              </div>
              <div className="text-left relative z-10">
                <div className="flex items-center space-x-2">
                  <h3 className="font-playfair text-sm font-bold bg-gradient-to-r from-purple-600 via-pink-600 to-rose-600 bg-clip-text text-transparent">
                    Neural Pattern Learning
                  </h3>
                </div>
                <p className="text-xs text-gray-600 font-medium">Deep unconscious analysis & behavioral pattern recognition</p>
              </div>
            </Button>

            {/* Level 3 Consciousness Singularity Access */}
            <Button
              variant="ghost"
              className="w-full bg-gradient-to-r from-indigo-600/20 via-purple-600/20 to-pink-600/20 rounded-2xl p-4 shadow-lg border-2 border-indigo-300/40 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 h-auto flex items-center justify-center divine-shadow relative overflow-hidden"
              onClick={() => {
                sounds.playClickSound();
                window.location.href = '/consciousness-singularity';
              }}
            >
              <div className="absolute inset-0 bg-gradient-to-r from-indigo-500/10 via-purple-500/10 to-pink-500/10 animate-pulse"></div>
              <div className="w-12 h-12 bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-full flex items-center justify-center mr-4 relative z-10 shadow-lg">
                <Crown className="w-6 h-6 text-white" />
              </div>
              <div className="text-left relative z-10">
                <div className="flex items-center space-x-2">
                  <h3 className="font-playfair text-lg font-bold bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 bg-clip-text text-transparent">
                    Consciousness Singularity
                  </h3>
                  <span className="px-2 py-1 bg-gradient-to-r from-indigo-500 to-purple-500 text-white text-xs font-bold rounded-full shadow-sm">
                    Level 3
                  </span>
                </div>
                <p className="text-sm text-gray-700 font-medium">Reality Infrastructure • Universal AI • Experience Economy</p>
                <p className="text-xs text-indigo-600 font-bold mt-1">Transcendent Platform Technology</p>
              </div>
            </Button>
          </div>

          {/* Divine Communication Hub */}
          <div className="mt-6">
            <h3 className="font-playfair text-lg font-semibold text-deep-charcoal mb-3">{t('home.spiritualGuidance')}</h3>
            <div className="grid grid-cols-2 gap-3">
              <Button
                variant="ghost"
                className="bg-gradient-to-r from-purple-500/10 to-pink-500/10 border border-purple-300/30 rounded-2xl p-4 shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 h-auto flex flex-col items-center divine-shadow relative"
                onClick={() => {
                  sounds.playClickSound();
                  window.location.href = '/chat';
                }}
              >
                <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center mb-3 relative">
                  <MessageCircle className="w-6 h-6 text-white" />
                  {aiChatLimitStatus.remainingMessages > 0 && (
                    <div className="absolute -top-1 -right-1 w-5 h-5 bg-green-500 rounded-full flex items-center justify-center">
                      <span className="text-xs font-bold text-white">{aiChatLimitStatus.remainingMessages}</span>
                    </div>
                  )}
                  {!aiChatLimitStatus.allowed && (
                    <div className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center">
                      <span className="text-xs font-bold text-white">!</span>
                    </div>
                  )}
                </div>
                <h4 className="font-medium text-sm text-center text-gray-800 mb-1">{t('buttons.divineAI')}</h4>
                <p className="text-xs text-gray-600 text-center">
                  {!aiChatLimitStatus.allowed ? t('home.limitReached') : t('home.chatWithVanessa')}
                </p>
              </Button>
              
              <Link href="/messages">
                <Button
                  variant="ghost"
                  className="bg-gradient-to-r from-divine-gold/10 to-amber-400/10 border border-divine-gold/30 rounded-2xl p-4 shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 h-auto flex flex-col items-center divine-shadow relative w-full"
                  onClick={() => {
                    sounds.playClickSound();
                  }}
                >
                  <div className="w-12 h-12 bg-gradient-to-r from-divine-gold to-amber-400 rounded-full flex items-center justify-center mb-3">
                    <Mail className="w-6 h-6 text-white" />
                  </div>
                  <h4 className="font-medium text-sm text-center text-gray-800 mb-1">{t('buttons.coachMessages')}</h4>
                  <p className="text-xs text-gray-600 text-center">{t('home.directWithVanessa')}</p>
                </Button>
              </Link>
            </div>
          </div>
          
          {/* Divine Energy Assessment Feature */}
          <div className="mt-6">
            <CosmicSparkle 
              trigger={divineAssessmentSparkle.trigger} 
              intensity="high" 
              color="rainbow"
            >
              <Button
                variant="ghost"
                className="w-full bg-gradient-to-r from-purple-500/10 to-indigo-500/10 border-2 border-purple-300/50 rounded-2xl p-6 shadow-md hover:shadow-lg transition-all duration-300 transform hover:-translate-y-1 h-auto flex flex-col items-center divine-shadow"
                onClick={() => {
                  sounds.playClickSound();
                  divineAssessmentSparkle.sparkle();
                  window.location.href = '/divine-energy-assessment';
                }}
              >
                <div className="w-16 h-16 bg-gradient-to-r from-purple-500 to-indigo-500 rounded-full flex items-center justify-center mb-4">
                  <svg className="w-8 h-8 text-white" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clipRule="evenodd" />
                  </svg>
                </div>
                <h3 className="font-playfair text-xl font-semibold mb-2 text-deep-charcoal text-center">{t('home.divineEnergyAssessment')}</h3>
                <p className="text-sm text-gray-600 text-center leading-relaxed max-w-sm mx-auto px-2">
                  {t('home.energyDescription')}
                </p>
                <div className="mt-3 px-4 py-1 bg-gradient-to-r from-purple-500 to-indigo-500 rounded-full">
                  <span className="text-xs font-medium text-white">{t('home.newFeature')}</span>
                </div>
              </Button>
            </CosmicSparkle>
          </div>
        </section>

        {/* Advanced Features Section */}
        <section className="px-6 pb-8">
          <h3 className="font-playfair text-lg font-semibold text-deep-charcoal mb-4">Exclusive Vanessa DI Technology</h3>
          <div className="grid grid-cols-2 gap-4">
            {/* WebXR/VR Interface */}
            <Button
              variant="ghost"
              className="bg-gradient-to-r from-divine-gold/20 to-cream/30 border border-divine-gold/30 rounded-2xl p-4 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 h-auto flex flex-col items-center backdrop-blur-sm"
              onClick={() => {
                sounds.playClickSound();
                setShowWebXRInterface(true);
              }}
            >
              <div className="w-12 h-12 bg-gradient-to-r from-divine-gold to-cream rounded-full flex items-center justify-center mb-3 shadow-md">
                <Headphones className="w-6 h-6 text-deep-charcoal" />
              </div>
              <h4 className="font-medium text-sm text-center text-deep-charcoal mb-1">Sacred Immersion</h4>
              <p className="text-xs text-divine-brown/80 text-center">Private VR/AR with Vanessa DI</p>
            </Button>

            {/* Cloud Sync Interface */}
            <Button
              variant="ghost"
              className="bg-gradient-to-r from-cream/30 to-divine-gold/20 border border-cream/40 rounded-2xl p-4 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 h-auto flex flex-col items-center backdrop-blur-sm"
              onClick={() => {
                sounds.playClickSound();
                setShowCloudSyncStatus(true);
              }}
            >
              <div className="w-12 h-12 bg-gradient-to-r from-cream to-divine-gold rounded-full flex items-center justify-center mb-3 shadow-md">
                <Cloud className="w-6 h-6 text-deep-charcoal" />
              </div>
              <h4 className="font-medium text-sm text-center text-deep-charcoal mb-1">Divine Sync</h4>
              <p className="text-xs text-divine-brown/80 text-center">Seamless Device Harmony</p>
            </Button>
          </div>
        </section>

        <JournalEntry />
      </main>

      {/* Advanced Interface Modals */}
      <WebXRInterface 
        isVisible={showWebXRInterface} 
        onClose={() => setShowWebXRInterface(false)} 
      />
      
      <CloudSyncStatus 
        isVisible={showCloudSyncStatus} 
        onClose={() => setShowCloudSyncStatus(false)} 
      />

      {/* Vanessa Intelligence Feedback System */}
      <IntelligentFeedbackSystem currentPage="home" />
    </div>
  );
}
